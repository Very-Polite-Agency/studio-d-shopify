<link rel="stylesheet" href="{{ 'component-card.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-price.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'section-product-recommendations.css' | asset_url }}" media="print"
  onload="this.media='all'">

<noscript>{{ 'component-card.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-price.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'section-product-recommendations.css' | asset_url | stylesheet_tag }}</noscript>

{% assign product_limit = section.settings.product_limit | default: 6 %}

{%- style -%}
.section-{{ section.id }}-padding {
padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
}

@media screen and (min-width: 750px) {
.section-{{ section.id }}-padding {
padding-top: {{ section.settings.padding_top }}px;
padding-bottom: {{ section.settings.padding_bottom }}px;
}
}
{%- endstyle -%}

<div class="container-fluid pr-0 pr-md-20 pt-60">
  <div class="row">
    <div class="col-12 pb-10">
      <h4> {{section.settings.heading}} </h4>
    </div>
  </div>
  <div class="row">
    <div class="col-12">
      <product-recommendations class="product-recommendations page-width section-{{ section.id }}-padding isolate"
      data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4">
      {% if recommendations.performed and recommendations.products_count > 0 %}

      <!-- Beginning of Dynamic Grid Block -->
      <div class="recommended-grid" id="{{ section_name }}--recommended-grid--{{ section.id }}">

        <div class="recommended-grid__main">
          <div class="recommended-grid__container">

            {% for recommendation in recommendations.products limit: 5 %}
            <div class="recommended-grid__item" data-count="{{ forloop.index }}" data-index="{{ forloop.index0 }}">

              <div class="recommended__featured-image product__featured-image">
                <a class="recommended__featured-image-link" href="{{ recommendation.url }}" title="{{ recommendation.title }}" target="_self">
                  {%
                    render 'lazyload-image',
                    alt_text: recommendation.title,
                    image: recommendation.featured_image,
                  %}
                </a>
              </div>
              <div class="recommended__info mt-auto">
                <div class="row">
                  <div class="col-12 col-md-7">
                    <p>{{ recommendation.title }}</p>
                    <span> {% render 'price', product: recommendation %}  </span>
                  </div>
                  <div class="col-12 col-md-5 d-flex align-items-end">
                    <div class="cta justify-md-content-end pt-15 pt-md-0" data-justify="not-set"><a class="link outlined" href="{{ recommendation.url }}"
                        target="_self">
                        <span class="link__title">Shop Now</span>
                      </a></div>
                  </div>
                </div>



              </div>

            </div>
            {%- endfor -%}


          </div>
        </div>

      </div>
      <!-- End of Dynamic Grid Block -->

      {% endif %}
    </product-recommendations>
    </div>
  </div>
</div>



{% javascript %}
class ProductRecommendations extends HTMLElement {
constructor() {
super();

const handleIntersection = (entries, observer) => {
if (!entries[0].isIntersecting) return;
observer.unobserve(this);

fetch(this.dataset.url)
.then(response => response.text())
.then(text => {
const html = document.createElement('div');
html.innerHTML = text;
const recommendations = html.querySelector('product-recommendations');

if (recommendations && recommendations.innerHTML.trim().length) {
this.innerHTML = recommendations.innerHTML;
}

if (html.querySelector('.grid__item')) {
this.classList.add('product-recommendations--loaded');
}
})
.catch(e => {
console.error(e);
});
}

new IntersectionObserver(handleIntersection.bind(this), {rootMargin: '0px 0px 200px 0px'}).observe(this);
}
}

customElements.define('product-recommendations', ProductRecommendations);
{% endjavascript %}

{% schema %}
{
	"name": "Product Recommendations",
	"tag": "section",
	"class": "section",
	"settings": [
    {
      "content": "Dynamic recommendations use order and product information to change and improve over time.",
			"type": "paragraph"
		},
		{
      "label": "Heading",
			"type": "text",
      "default": "You may also like",
			"id": "heading"
		},
    {
      "content": "Settings",
      "type": "header"
    },
    {
      "label": "Max number of recommended products",
      "type": "range",
      "min": 3,
      "max": 9,
      "step": 1,
      "default": 4,
      "id": "product_limit"
    }
	],
  "presets": [
    {
      "name": "Product Recommendations"
    }
  ],
  "templates": [ "product" ]
}
{% endschema %}
